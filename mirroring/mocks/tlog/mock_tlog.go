// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sigstore/rekor/pkg/generated/client/tlog (interfaces: ClientService)
//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Package mockTlog is a generated GoMock package.
package mockTlog

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	tlog "github.com/sigstore/rekor/pkg/generated/client/tlog"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// GetLogInfo mocks base method.
func (m *MockClientService) GetLogInfo(arg0 *tlog.GetLogInfoParams) (*tlog.GetLogInfoOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogInfo", arg0)
	ret0, _ := ret[0].(*tlog.GetLogInfoOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogInfo indicates an expected call of GetLogInfo.
func (mr *MockClientServiceMockRecorder) GetLogInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogInfo", reflect.TypeOf((*MockClientService)(nil).GetLogInfo), arg0)
}

// GetLogProof mocks base method.
func (m *MockClientService) GetLogProof(arg0 *tlog.GetLogProofParams) (*tlog.GetLogProofOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogProof", arg0)
	ret0, _ := ret[0].(*tlog.GetLogProofOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogProof indicates an expected call of GetLogProof.
func (mr *MockClientServiceMockRecorder) GetLogProof(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogProof", reflect.TypeOf((*MockClientService)(nil).GetLogProof), arg0)
}

// GetPublicKey mocks base method.
func (m *MockClientService) GetPublicKey(arg0 *tlog.GetPublicKeyParams) (*tlog.GetPublicKeyOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].(*tlog.GetPublicKeyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockClientServiceMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockClientService)(nil).GetPublicKey), arg0)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}
