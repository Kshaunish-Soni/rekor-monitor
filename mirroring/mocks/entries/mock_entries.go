// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sigstore/rekor/pkg/generated/client/entries (interfaces: ClientService)
//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Package mockEntries is a generated GoMock package.
package mockEntries

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	entries "github.com/sigstore/rekor/pkg/generated/client/entries"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateLogEntry mocks base method.
func (m *MockClientService) CreateLogEntry(arg0 *entries.CreateLogEntryParams) (*entries.CreateLogEntryCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogEntry", arg0)
	ret0, _ := ret[0].(*entries.CreateLogEntryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogEntry indicates an expected call of CreateLogEntry.
func (mr *MockClientServiceMockRecorder) CreateLogEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogEntry", reflect.TypeOf((*MockClientService)(nil).CreateLogEntry), arg0)
}

// GetLogEntryByIndex mocks base method.
func (m *MockClientService) GetLogEntryByIndex(arg0 *entries.GetLogEntryByIndexParams) (*entries.GetLogEntryByIndexOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogEntryByIndex", arg0)
	ret0, _ := ret[0].(*entries.GetLogEntryByIndexOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEntryByIndex indicates an expected call of GetLogEntryByIndex.
func (mr *MockClientServiceMockRecorder) GetLogEntryByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEntryByIndex", reflect.TypeOf((*MockClientService)(nil).GetLogEntryByIndex), arg0)
}

// GetLogEntryByUUID mocks base method.
func (m *MockClientService) GetLogEntryByUUID(arg0 *entries.GetLogEntryByUUIDParams) (*entries.GetLogEntryByUUIDOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogEntryByUUID", arg0)
	ret0, _ := ret[0].(*entries.GetLogEntryByUUIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEntryByUUID indicates an expected call of GetLogEntryByUUID.
func (mr *MockClientServiceMockRecorder) GetLogEntryByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEntryByUUID", reflect.TypeOf((*MockClientService)(nil).GetLogEntryByUUID), arg0)
}

// GetLogEntryProof mocks base method.
func (m *MockClientService) GetLogEntryProof(arg0 *entries.GetLogEntryProofParams) (*entries.GetLogEntryProofOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogEntryProof", arg0)
	ret0, _ := ret[0].(*entries.GetLogEntryProofOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEntryProof indicates an expected call of GetLogEntryProof.
func (mr *MockClientServiceMockRecorder) GetLogEntryProof(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEntryProof", reflect.TypeOf((*MockClientService)(nil).GetLogEntryProof), arg0)
}

// SearchLogQuery mocks base method.
func (m *MockClientService) SearchLogQuery(arg0 *entries.SearchLogQueryParams) (*entries.SearchLogQueryOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLogQuery", arg0)
	ret0, _ := ret[0].(*entries.SearchLogQueryOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLogQuery indicates an expected call of SearchLogQuery.
func (mr *MockClientServiceMockRecorder) SearchLogQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLogQuery", reflect.TypeOf((*MockClientService)(nil).SearchLogQuery), arg0)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), arg0)
}
